stages:
  - build-assets
  - build-page
  - deploy

build-assets:
  # Needed vars for asset generation: NPM_FA_TOKEN
  stage: build-assets
  image: node:10.15.3
  only:
    - master
  artifacts:
    paths:
      - assets/dist
  before_script:
    - echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc
    - echo "//npm.fontawesome.com/:_authToken=$NPM_FA_TOKEN" >> .npmrc
  script:
    - npm install
    - npm run production

build-page:
  stage: build-page
  image: monachus/hugo
  only:
    - master
  dependencies:
    - build-assets
  artifacts:
    paths:
      - public
  script:
    - hugo

deploy:
  # Needed vars for deployment: DEPLOY_HOST, DEPLOY_PATH, DEPLOY_PRIVATE_KEY
  stage: deploy
  image: ubuntu:18.04
  only:
    - master
  before_script:
    # Setup SSH
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # Install webp converter
    #- apt update && apt install -y wget libjpeg-dev libpng-dev libtiff-dev libgif-dev
    #- wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.0.2-linux-x86-64.tar.gz
    #- tar -xzf libwebp-1.0.2-linux-x86-64.tar.gz
  script:
    # Generate webp versions of all images
    #- pwd && ls
    #- find public/en -name "*.jpg" -o -name "*.png" | xargs -I{} ./libwebp-1.0.2-linux-x86-64/bin/cwebp -mt {} -o {}.webp
    #- find public/de -name "*.jpg" -o -name "*.png" | xargs -I{} ./libwebp-1.0.2-linux-x86-64/bin/cwebp -mt {} -o {}.webp
    # Deploy the page to the server
    - export DEPLOY_TS=$(date +%s)
    - export DEPLOY_DEST=$DEPLOY_PATH/releases/$DEPLOY_TS
    - tar -czf /tmp/build.tar.gz public
    - ssh $DEPLOY_HOST "mkdir -p $DEPLOY_DEST"
    - scp /tmp/build.tar.gz $DEPLOY_HOST:$DEPLOY_DEST
    - ssh $DEPLOY_HOST "cd $DEPLOY_DEST && tar -xzf build.tar.gz"
    - ssh $DEPLOY_HOST "rm -f $DEPLOY_PATH/current && ln -s $DEPLOY_DEST $DEPLOY_PATH/current"
